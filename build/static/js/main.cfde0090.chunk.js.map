{"version":3,"sources":["store/forecast/index.js","App.js","services/forecast.js","reportWebVitals.js","store/user/index.js","store/rootReducer.js","index.js","store/index.js"],"names":["ADD_FORECAST","defaultState","gcolors","window","rule_plot","p","cindex","Math","round","value","colors","slice","stops","step","parseFloat","Number","length","toFixed","i","push","gradientStops","join","gradientColors","App","config","setConfig","useState","loading","setLoading","mounted","useRef","dispatch","useDispatch","forecast","useSelector","state","todayWeatherSummaryIcon","todayWeatherSummaryText","todayWeatherSummaryMinimumTemperature","todayWeatherSummaryMaximumTemperature","seriesTemp","scaleXValues","weatherIcons","chartConfig","type","plot","tooltip","visible","fillAngle","jsRule","plotarea","marginTop","animation","effect","scaleX","label","text","item","transform","all","timezone","scaleY","labels","series","values","crosshairX","plot-label","forecastday","hour","map","temp_c","time_epoch","index","background-image","concat","condition","icon","background-fit","font-size","border-radius","offset-y","hook","day","mintemp_c","maxtemp_c","minDateValue","min","maxDateValue","max","minValue","maxValue","useEffect","current","latitude","longitude","fetch","then","data","json","getWeatherForecast","items","addForecast","React","createElement","className","src","alt","width","height","String","fromCharCode","style","border","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","username","rootReducer","combineReducers","arguments","undefined","action","Object","assign","user","ReactDOM","createRoot","document","getElementById","render","StrictMode","Provider","store","createStore","__REDUX_DEVTOOLS_EXTENSION__"],"mappings":"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","file":"static/js/main.cfde0090.chunk.js","sourcesContent":["const ADD_FORECAST = \"ADD_FORECAST\";\n\nconst defaultState = {};\n\nexport function addForecast(forecast) {\n  return {\n    type: ADD_FORECAST,\n    forecast,\n  };\n}\n\nexport const forecastReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ADD_FORECAST:\n      const newState = Object.assign({}, defaultState, action.forecast);\n      return newState;\n    default:\n      return state;\n  }\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import ZingChart from \"zingchart-react\";\n\nimport { getWeatherForecast } from \"./services/forecast\";\nimport { addForecast } from \"./store/forecast/index\";\nimport \"./App.css\";\n\nlet gcolors = [\n  \"#0AAEF6\",\n  \"#08A8F6\",\n  \"#0BA8F5\",\n  \"#3AB5C5\",\n  \"#72C58F\",\n  \"#A6D15B\",\n  \"#DDD324\",\n  \"#FCB800\",\n  \"#FC7300\",\n  \"#FE2901\",\n  \"#FD2300\",\n  \"#FF0000\",\n];\n\nwindow.rule_plot = function (p) {\n  let cindex = Math.round(p.value / 5);\n\n  let colors = gcolors.slice(0, cindex);\n  let stops = [],\n    step = parseFloat(Number(0.9 / colors.length).toFixed(2));\n  for (let i = 0; i < colors.length; i++) {\n    stops.push(parseFloat(Number(0.05 + i * step).toFixed(2)));\n  }\n  return {\n    gradientStops: stops.join(\" \"),\n    gradientColors: colors.join(\" \"),\n  };\n};\n\nfunction App() {\n  const [config, setConfig] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  let mounted = useRef(true);\n  let chart = useRef(null);\n\n  const dispatch = useDispatch();\n\n  const forecast = useSelector((state) => state.forecast);\n\n  let seriesTemp = [];\n\n  let scaleXValues = [];\n\n  let weatherIcons = [];\n\n  let todayWeatherSummaryIcon;\n\n  let todayWeatherSummaryText;\n\n  let todayWeatherSummaryMinimumTemperature;\n  let todayWeatherSummaryMaximumTemperature;\n\n  let chartConfig = {\n    type: \"bar\",\n    plot: {\n      tooltip: {\n        visible: false,\n      },\n      fillAngle: 270,\n      jsRule: \"rule_plot()\",\n    },\n    plotarea: {\n      marginTop: 100,\n    },\n    animation: {\n      effect: \"ANIMATION_FADE_OUT\",\n    },\n    scaleX: {\n      step: \"1hour\",\n      label: {\n        text: \"test\",\n      },\n      item: {\n        // border: \"1px solid red\",\n      },\n      transform: {\n        type: \"date\",\n        all: \"%h:%i:%A\",\n      },\n      // \"max-items\": 12,\n    },\n    // utc: true,\n    timezone: 3,\n    scaleY: {\n      label: {\n        text: \"Temperature (°C)\",\n      },\n    },\n    labels: weatherIcons,\n    series: [\n      {\n        values: seriesTemp,\n      },\n    ],\n    crosshairX: {\n      \"plot-label\": {\n        text: \"%v°C\",\n      },\n    },\n  };\n\n  if (forecast.forecast) {\n    // console.log(forecast.forecast);\n    seriesTemp = forecast.forecast.forecastday[0].hour.map(\n      (item) => item.temp_c\n    );\n\n    scaleXValues = forecast.forecast.forecastday[0].hour.map(\n      (item) => item.time_epoch\n    );\n\n    weatherIcons = forecast.forecast.forecastday[0].hour.map((item, index) => {\n      return {\n        \"background-image\": `https:${item.condition.icon}`,\n        \"background-fit\": \"xy\",\n        \"font-size\": \"30px\",\n        \"border-radius\": \"50%\",\n        \"offset-y\": -30,\n        hook: `node:plot=0;index=${index}`,\n        // text: item.condition.text,\n      };\n    });\n\n    todayWeatherSummaryIcon = `https:${forecast.forecast.forecastday[0].day.condition.icon}`;\n\n    todayWeatherSummaryText =\n      forecast.forecast.forecastday[0].day.condition.text;\n\n    todayWeatherSummaryMinimumTemperature =\n      forecast.forecast.forecastday[0].day.mintemp_c;\n    todayWeatherSummaryMaximumTemperature =\n      forecast.forecast.forecastday[0].day.maxtemp_c;\n\n    let minDateValue = Math.min(...scaleXValues);\n\n    let maxDateValue = Math.max(...scaleXValues);\n\n    chartConfig.scaleX.minValue = minDateValue * 1000;\n    chartConfig.scaleX.maxValue = maxDateValue * 1000;\n\n    chartConfig.series[0].values = seriesTemp;\n    chartConfig.labels = weatherIcons;\n  }\n\n  useEffect(() => {\n    mounted.current = true;\n\n    getWeatherForecast().then((items) => {\n      if (mounted.current) {\n        dispatch(addForecast(items));\n        setConfig(chartConfig);\n        setLoading(false);\n      }\n    });\n\n    return () => (mounted.current = false);\n  }, []);\n\n  useEffect(() => {\n    setConfig(chartConfig);\n  }, [forecast]);\n\n  if (loading) {\n    return <div>loading...</div>;\n  } else {\n    return (\n      <div className=\"App\">\n        <div className=\"weatherSummary\">\n          <div className=\"today\">\n            <div className=\"heading\">Today</div>\n            <div className=\"summary\">\n              <div className=\"summaryIcon\">\n                {loading ? (\n                  <span>loading...</span>\n                ) : (\n                  <img\n                    src={todayWeatherSummaryIcon}\n                    alt=\"wather icon\"\n                    width={64}\n                    height={64}\n                  />\n                )}\n              </div>\n              <div className=\"summaryTemperature\">\n                <span className=\"summaryTemperatureMax\">\n                  {todayWeatherSummaryMaximumTemperature}\n                  {String.fromCharCode(176)}\n                </span>\n                <br />\n                <span className=\"summaryTemperatureMin\">\n                  {todayWeatherSummaryMinimumTemperature}\n                  {String.fromCharCode(176)}\n                </span>\n              </div>\n              <div className=\"summaryText\">\n                <span>{todayWeatherSummaryText}</span>\n                <br />\n                <span className=\"summaryTextHidden\">\n                  {todayWeatherSummaryText}\n                </span>\n              </div>\n            </div>\n          </div>\n          <div className=\"otherDays\"></div>\n        </div>\n        <div style={{ border: \"1px solid red\", height: 500 }}>\n          {/* <ZingChart data={config} ref={chart} /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export function getWeatherForecast(latitude, longitude) {\n  return fetch(\n    `https://api.weatherapi.com/v1/forecast.json?key=b13aeabd460a4ecfb5681331230211&q=Kampala&days=1&aqi=no&alerts=no`\n  ).then((data) => {\n    // console.log(data.json());\n    return data.json();\n  });\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const LOGIN = \"LOGIN\";\nconst LOGOUT = \"LOGOUT\";\nconst defaultState = {\n  username: \"\",\n};\nexport const userReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      const newState = Object.assign({}, defaultState, action.user);\n      return newState;\n    case LOGOUT:\n      return defaultState;\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { userReducer } from \"./user/index\";\nimport { forecastReducer } from \"./forecast/index\";\n\nexport const rootReducer = combineReducers({\n  forecast: forecastReducer,\n  user: userReducer,\n});\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { store } from \"./store/index\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store()}>\n      <App />\n    </Provider>\n    ,\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, } from \"redux\";\nimport { rootReducer } from \"./rootReducer\";\n\nexport const store = (state = {}) => {\n  return createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n};\n"],"sourceRoot":""}